// AUTOGENERATED BY @mikechau/js-config-gen.

'use strict';
{% if (o.env === 'production') { %}var _ = require('lodash');
var path = require('path');
var webpack = require('webpack');
var baseWebpackConfig = require('{%= o.webpackConfigPath %}');
var CleanPlugin = require('clean-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var StatsPlugin = require('stats-webpack-plugin');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var PurifyCSSPlugin = require('bird3-purifycss-webpack-plugin');

var buildDate = (new Date());

var config = _.merge({}, baseWebpackConfig, {
  /**
   * Build caching, disable for Production
   *
   * https://webpack.github.io/docs/configuration.html#cache
   */
  cache: false,

  module: {
    /**
     * Loaders
     *
     * https://webpack.github.io/docs/loaders.html
     *
     * Loaders match for a particular file extension, options to the loader are
     * provided by query param
     *
     * Style Loader: https://github.com/webpack/style-loader
     * CSS Loader: https://github.com/webpack/css-loader
     * LESS Loader: https://github.com/webpack/less-loader
     * SASS Loader: https://github.com/jtangelder/sass-loader
     *
     * Production builds use ExtractTextPlugin to create stylesheets
     *
     * https://github.com/webpack/extract-text-webpack-plugin
     */
    loaders: baseWebpackConfig.module.loaders.concat([
      {
        "test": /\.css$/,
        "loader": ExtractTextPlugin.extract('style-loader', 'css')
      },
      {
        "test": /\.less$/,
        "loader": ExtractTextPlugin.extract('style-loader', 'css!less')
      },
      {
        "test": /\.scss$/,
        "loader": ExtractTextPlugin.extract('style-loader', 'css!sass')
      },
    ])
  },

  /**
   * Plugins
   * https://webpack.github.io/docs/configuration.html#plugins
   * https://webpack.github.io/docs/using-plugins.html
   * https://webpack.github.io/docs/list-of-plugins.html
   */
  plugins: [
    /**
     * Define Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#defineplugin
     *
     * Defines global constants, we define NODE_ENV to enable React production
     * mode
     *
     * https://facebook.github.io/react/downloads.html#npm
     */
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'production')
      }
    }),

    /**
     * No Errors Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#noerrorsplugin
     *
     * No assets are emitted when there are build errors.
     */
    new webpack.NoErrorsPlugin(),

    /**
     * Clean Plugin
     *
     * https://github.com/johnagan/clean-webpack-plugin
     *
     * Remove folders before building.
     */
    new CleanPlugin(['build']),

    /**
     * Dedupe Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#dedupeplugin
     *
     * Search for equal or similar files and deduplicate them in the output.
     */
    new webpack.optimize.DedupePlugin(),

    /**
     * UglifyJs Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin
     *
     * Javascript minifier / dead code elimination.
     */
    new webpack.optimize.UglifyJsPlugin({
      output: {
        comments: false
      },
      compress: {
        warnings: false
      }
    }),

    /**
     * Occurence Order Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#occurenceorderplugin
     *
     * Order the modules and chunks by occurrence. This saves space, because
     * often referenced modules and chunks get smaller ids.
     */
    new webpack.optimize.OccurenceOrderPlugin(),

    /**
     * Aggressive Merging Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#aggressivemergingplugin
     *
     * Utilizes a more aggressive merging strategy to reduce build filesize.
     */
    new webpack.optimize.AggressiveMergingPlugin(),

    /**
     * Extract Text Plugin
     *
     * https://github.com/webpack/extract-text-webpack-plugin
     *
     * Generates stylesheets required from your modules.
     */
    new ExtractTextPlugin('[name]-[hash].css'),

    /**
     * PurifyCSS
     *
     * https://github.com/purifycss/purifycss
     * https://github.com/DragonsInn/bird3-purifycss-webpack-plugin
     *
     * CSS dead code elimination! Provide paths to search and it will remove
     * any unused rules from the stylesheets.
     */
    new PurifyCSSPlugin({
      purifyOptions: { info: true },
      paths: [
        'src/**/*.jsx',
        'src/**/*.js'
      ]
    }),

    /**
     * Html Plugin
     *
     * https://github.com/ampedandwired/html-webpack-plugin
     *
     * Generates HTML. We use this to create a index.html at build time, with
     * the fingerprinted asset paths.
     */
    new HtmlWebpackPlugin({
      title: 'My React Application',
      description: 'Sample React Application',
      filename: '../index.html',
      minify: {
        collapseWhitespace: true
      },
      inject: false,
      template: './static/prod.index.html',
      buildDate: {
        unix: buildDate.getTime(),
        string: buildDate.toString(),
        date: buildDate.toDateString()
      }
    }),

    /**
     * Stats Plugin
     *
     * https://github.com/unindented/stats-webpack-plugin
     *
     * Ouputs webpack stats into a file.
     */
    new StatsPlugin(path.join(__dirname, 'build', 'stats.json'), {
      chunkModules: true,
      exclude: [
        /node_modules[\\\/]react(-router)?[\\\/]/
      ]
    })
  ]
});

{% } else { %}
var _ = require('lodash');
var path = require('path');
var webpack = require('webpack');
var baseWebpackConfig = require('{%= o.webpackConfigPath %}');

var config = _.merge({}, baseWebpackConfig, {
  /**
   * Loaders
   *
   * https://webpack.github.io/docs/loaders.html
   *
   * Loaders match for a particular file extension, options to the loader are provided by query param
   *
   * Style Loader: https://github.com/webpack/style-loader
   * CSS Loader: https://github.com/webpack/css-loader
   * LESS Loader: https://github.com/webpack/less-loader
   * SASS Loader: https://github.com/jtangelder/sass-loader
   *
   * Development/Test builds do not need the ExtractTextPlugin.
   * Leaves styles inline.
   */
  module: {
    loaders: baseWebpackConfig.module.loaders.concat([
      {
        "test": /\.css$/,
        "loader": "style!css"
      },
      {
        "test": /\.less$/,
        "loader": "style!css!less"
      },
      {
        "test": /\.scss$/,
        "loader": "style!css!scss"
      },
    ])
  },
{% if (o.env === 'development') { %}
  /**
   * Eslint loader configuration
   *
   * https://github.com/MoOx/eslint-loader
   *
   *  We provide it a development specific eslint, where errors have been set to
   *  warnings.
   */
  eslint: {
    configFile: path.resolve(__dirname, '.eslintrc.dev')
  },
{% } %}
  plugins: [
    /**
     * Define Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#defineplugin
     *
     * Defines global constants, we define NODE_ENV to enable React production
     * mode
     *
     * https://facebook.github.io/react/downloads.html#npm
     */
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV || '{%= o.env %}')
      }
    }),{% if (o.env === 'development'){ %}

    /**
     * Hot Module Replacement Plugin
     *
     * https://webpack.github.io/docs/hot-module-replacement.html
     * https://webpack.github.io/docs/hot-module-replacement-with-webpack.html
     * https://webpack.github.io/docs/list-of-plugins.html#hotmodulereplacementplugin
     *
     * Hot reloading! It's the new hotness!
     */
    new webpack.HotModuleReplacementPlugin(),{% } %}

    /**
     * No Errors Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#noerrorsplugin
     *
     * No assets are emitted when there are build errors.
     */
    new webpack.NoErrorsPlugin()
  ]
});{% } %}

module.exports = config;
