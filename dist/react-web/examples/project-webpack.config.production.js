// AUTOGENERATED BY @mikechau/js-config-gen.

'use strict';
var _ = require('lodash');
var webpack = require('webpack');
var baseWebpackConfig = require('./node_modules/@mikechau/js-config-gen/dist/react-web/base-webpack.config.production');
var CleanPlugin = require('clean-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var StatsWriterPlugin = require('webpack-stats-plugin').StatsWriterPlugin;
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var PurifyCSSPlugin = require('purifycss-webpack-plugin');
var CompressionPlugin = require('compression-webpack-plugin');
var SriStatsPlugin = require('sri-stats-webpack-plugin');
var SprocketsStatsPlugin = require('sprockets-stats-webpack-plugin');

var buildDate = (new Date());

var config = _.merge({}, baseWebpackConfig, {
  /**
   * Build caching, disable for Production
   *
   * https://webpack.github.io/docs/configuration.html#cache
   *
   */
  cache: false,

  module: {
    /**
     * Loaders
     *
     * https://webpack.github.io/docs/loaders.html
     *
     * Loaders match for a particular file extension, options to the loader are
     * provided by query param
     *
     * Style Loader: https://github.com/webpack/style-loader
     * CSS Loader: https://github.com/webpack/css-loader
     * LESS Loader: https://github.com/webpack/less-loader
     * SASS Loader: https://github.com/jtangelder/sass-loader
     *
     * Production builds use ExtractTextPlugin to create stylesheets
     *
     * https://github.com/webpack/extract-text-webpack-plugin
     *
     */
    loaders: baseWebpackConfig.module.loaders.concat([
      {
        'test': /\.css$/,
        'loader': ExtractTextPlugin.extract('style-loader', 'css')
      },
      {
        'test': /\.less$/,
        'loader': ExtractTextPlugin.extract('style-loader', 'css!less')
      },
      {
        'test': /\.scss$/,
        'loader': ExtractTextPlugin.extract('style-loader', 'css!sass')
      }
    ])
  },

  /**
   * Plugins
   *
   * https://webpack.github.io/docs/configuration.html#plugins
   * https://webpack.github.io/docs/using-plugins.html
   * https://webpack.github.io/docs/list-of-plugins.html
   *
   */
  plugins: [
    /**
     * Define Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#defineplugin
     *
     * Defines global constants, we define NODE_ENV to enable React production
     * mode
     *
     * https://facebook.github.io/react/downloads.html#npm
     *
     */
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'production')
      }
    }),

    /**
     * No Errors Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#noerrorsplugin
     *
     * No assets are emitted when there are build errors.
     *
     */
    new webpack.NoErrorsPlugin(),

    /**
     * Clean Plugin
     *
     * https://github.com/johnagan/clean-webpack-plugin
     *
     * Remove folders before building.
     *
     */
    new CleanPlugin(['build']),

    /**
     * Dedupe Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#dedupeplugin
     *
     * Search for equal or similar files and deduplicate them in the output.
     *
     */
    new webpack.optimize.DedupePlugin(),

    /**
     * UglifyJs Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin
     *
     * Javascript minifier / dead code elimination.
     *
     */
    new webpack.optimize.UglifyJsPlugin({
      output: {
        comments: false
      },
      compress: {
        warnings: false
      }
    }),

    /**
     * Occurence Order Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#occurenceorderplugin
     *
     * Order the modules and chunks by occurrence. This saves space, because
     * often referenced modules and chunks get smaller ids.
     *
     */
    new webpack.optimize.OccurenceOrderPlugin(),

    /**
     * Aggressive Merging Plugin
     *
     * https://webpack.github.io/docs/list-of-plugins.html#aggressivemergingplugin
     *
     * Utilizes a more aggressive merging strategy to reduce build filesize.
     *
     */
    new webpack.optimize.AggressiveMergingPlugin(),

    /**
     * Extract Text Plugin
     *
     * https://github.com/webpack/extract-text-webpack-plugin
     *
     * Generates stylesheets required from your modules.
     *
     */
    new ExtractTextPlugin('[name]-[contenthash].css'),

    /**
     * PurifyCSS
     *
     * https://github.com/purifycss/purifycss
     * https://github.com/purifycss/purifycss-webpack-plugin
     *
     * CSS dead code elimination! Provide paths to search and it will remove
     * any unused rules from the stylesheets.
     *
     */
    new PurifyCSSPlugin({
      purifyOptions: {
        info: true,
        minify: true
      },
      paths: [
        'static/prod.index.html'
      ]
    }),

    /**
     * Subresource Integrity Stats Plugin
     *
     * https://github.com/mikechau/sri-stats-webpack-plugin
     *
     * Add subresource integrity hashes to stats.
     *
     */
    new SriStatsPlugin({
      customStatsKey: 'rails'
    }),

    /**
     * Sprockets Stats Plugin
     *
     * https://github.com/mikechau/sprockets-stats-webpack-plugin
     *
     * Add sprockets asset manifest metadata to stats.
     *
     */
    new SprocketsStatsPlugin({
      customStatsKey: 'rails'
    }),

    /**
     * Html Plugin
     *
     * https://github.com/ampedandwired/html-webpack-plugin
     *
     * Generates HTML. We use this to create a index.html at build time, with
     * the fingerprinted asset paths.
     *
     */
    new HtmlWebpackPlugin({
      title: 'My React Application',
      description: 'Sample React Application',
      filename: '../../index.html',
      minify: {
        collapseWhitespace: true
      },
      inject: false,
      template: './static/prod.index.html',
      buildDate: {
        unix: buildDate.getTime(),
        string: buildDate.toString(),
        date: buildDate.toDateString()
      }
    }),

    /**
     * Compression Plugin
     *
     * https://github.com/webpack/compression-webpack-plugin
     *
     * Gzip assets
     *
     */
    new CompressionPlugin({
      asset: '{file}.gz',
      regexp: /\.js$|\.css$/,
      algorithm: 'zopfli'
    }),

    /**
     * Stats Writer Plugin
     *
     * https://github.com/FormidableLabs/webpack-stats-plugin
     *
     * Ouputs webpack stats into a file.
     *
     */
    new StatsWriterPlugin({
      filename: '../../stats.json',
      fields: null
    })
  ]
});

module.exports = config;
